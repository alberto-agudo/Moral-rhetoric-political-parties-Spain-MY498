download_dir <- normalizePath("../data/raw/audio_files")
fprof <- makeFirefoxProfile(list(browser.download.manager.showWhenStarting = FALSE,
browser.download.alwaysOpenPanel = FALSE,
browser.download.dir = download_dir,
browser.helperApps.neverAsk.saveToDisk="text/csv",
browser.helperApps.neverAsk.saveToDisk = "text/csv",
browser.download.folderList = 2L))
# Initialize the browser
rD<- rsDriver(browser = c("firefox"), extraCapabilities = fprof)
driver <- rD$client
# Check that it is navigating properly
url <- "https://f2mp.com/twitter"
driver$navigate(url)
# Set up the selectors:
css <- list()
css$search_box <- '#txt-url'
css$search_btn <- '#btn-start'
css$audio_mode_btn <- '.active+ li a'
css$audio_mode_btn2 <- '.nav-tabs > li:nth-child(2) > a:nth-child(1)'
css$process_audio_btn <- '.btn-download-audio'
css$error_message <- '#result-errors > span:nth-child(3)'
css$download_btn <- 'button.btn-success:nth-child(2)'
css$close_download_btn <- '.btn-default'
# Search procedure per each tweet
final_tweets <- tweets_df %>% filter(status_id %in% c(1191050703692804096,
1191036957666807808,
1191023735366717440))
for (row in 1:nrow(final_tweets)){
print(paste0("ROW: ", row))
print(final_tweets[[row, "text"]])
has_https <- final_tweets[[row, "has_https"]]
print(paste0("HAS HTTPS: ", has_https))
# If the tweet does not have a link, go to the next one
if (has_https){
status_id <- final_tweets[[row, "status_id"]]
tweet_link <- final_tweets[[row, "status_url"]]
print(paste0("STATUS ID: ", status_id))
print(paste0("LINK: ", tweet_link))
# Get the directory to compare at the end and get the name of the new files
beginning_dir <- list.files(download_dir)
# Items for the search
search_box <- driver$findElement(using = "css", value = css$search_box)
search_btn <- driver$findElement(using = "css", value = css$search_btn)
# Type the URL and find the item
search_box$sendKeysToElement(list(tweet_link))
search_btn$clickElement()
# Give enough time before checking whether there is an error
Sys.sleep(1.5)
# Click the audio mode for download
#       Only the first time, afterwards it remains fixed:
#       n_searches <- n_searches + 1
audio_mode_btn <- driver$findElement(using = "css", value = css$audio_mode_btn2)
audio_mode_btn$clickElement()
# Check that there have not been any errors:
error_message <- driver$findElement(using = "css", value = css$error_message)
error_text <- error_message$getElementText()[[1]]
# This error appears when the file is not a video. In that case, the code
# does not run and we jump to the following tweet
while (error_text == ""){
Sys.sleep(0.1)
# Start processing the mp3 file
process_audio_btn <- driver$findElement(using = "css", value = css$process_audio_btn)
process_audio_btn$clickElement()
Sys.sleep(0.5)
# Find the download button
download_btn <- driver$findElement(using = "css",
value = css$download_btn)
download_text <- download_btn$getElementText()[[1]]
# Wait until the audio has been processed
while ((download_text == "") & (error_text == "")){
Sys.sleep(2)
# Check again that there is not any error after applying the search:
error_message <- driver$findElement(using = "css", value = css$error_message)
error_text <- error_message$getElementText()[[1]]
# Sometimes you need to click again
audio_mode_btn <- driver$findElement(using = "css", value = css$audio_mode_btn2)
audio_mode_btn$clickElement()
process_audio_btn <- driver$findElement(using = "css", value = css$process_audio_btn)
process_audio_btn$clickElement()
download_btn <- driver$findElement(using = "css",
value = css$download_btn)
download_text <- download_btn$getElementText()[[1]]
print("Waiting for download button to appear")
}
# Sometimes the search returns an error after clicking the item
# In that case, break the while loop
if (error_text != ""){
break
}
# Once the audio has been processed, download it:
download_btn$clickElement()
# Close download
close_button <- driver$findElement(using = "css",
value = css$close_download_btn)
close_button$clickElement()
# Finally, get the name of the new file and rename it according to
# the status id of the tweet (introduce a while loop to wait for the download)
end_dir <- list.files(download_dir)
new_file <- setdiff(end_dir, beginning_dir)
while ((identical(new_file, character(0))) | (length(new_file) == 2)){
Sys.sleep(1)
end_dir <- list.files(download_dir)
new_file <- setdiff(end_dir, beginning_dir)
print("Waiting for file to be downloaded")
}
file.rename(from = paste0(download_dir, "/", new_file),
to = paste0(download_dir, "/", status_id, ".mp3"))
# Finally, change the error text to exit the loop
error_text <- "Finished"
}
# Clean search box for next step
search_box <- driver$findElement(using = "css", value = css$search_box)
search_box$clearElement()
# Wait a bit to avoid overload:
Sys.sleep(0.2)
}
}
# Search procedure per each tweet
final_tweets <- tweets_df %>% filter(status_id %in% c(1192813057946378240))
for (row in 1:nrow(final_tweets)){
print(paste0("ROW: ", row))
print(final_tweets[[row, "text"]])
has_https <- final_tweets[[row, "has_https"]]
print(paste0("HAS HTTPS: ", has_https))
# If the tweet does not have a link, go to the next one
if (has_https){
status_id <- final_tweets[[row, "status_id"]]
tweet_link <- final_tweets[[row, "status_url"]]
print(paste0("STATUS ID: ", status_id))
print(paste0("LINK: ", tweet_link))
# Get the directory to compare at the end and get the name of the new files
beginning_dir <- list.files(download_dir)
# Items for the search
search_box <- driver$findElement(using = "css", value = css$search_box)
search_btn <- driver$findElement(using = "css", value = css$search_btn)
# Type the URL and find the item
search_box$sendKeysToElement(list(tweet_link))
search_btn$clickElement()
# Give enough time before checking whether there is an error
Sys.sleep(1.5)
# Click the audio mode for download
#       Only the first time, afterwards it remains fixed:
#       n_searches <- n_searches + 1
audio_mode_btn <- driver$findElement(using = "css", value = css$audio_mode_btn2)
audio_mode_btn$clickElement()
# Check that there have not been any errors:
error_message <- driver$findElement(using = "css", value = css$error_message)
error_text <- error_message$getElementText()[[1]]
# This error appears when the file is not a video. In that case, the code
# does not run and we jump to the following tweet
while (error_text == ""){
Sys.sleep(0.1)
# Start processing the mp3 file
process_audio_btn <- driver$findElement(using = "css", value = css$process_audio_btn)
process_audio_btn$clickElement()
Sys.sleep(0.5)
# Find the download button
download_btn <- driver$findElement(using = "css",
value = css$download_btn)
download_text <- download_btn$getElementText()[[1]]
# Wait until the audio has been processed
while ((download_text == "") & (error_text == "")){
Sys.sleep(2)
# Check again that there is not any error after applying the search:
error_message <- driver$findElement(using = "css", value = css$error_message)
error_text <- error_message$getElementText()[[1]]
# Sometimes you need to click again
audio_mode_btn <- driver$findElement(using = "css", value = css$audio_mode_btn2)
audio_mode_btn$clickElement()
process_audio_btn <- driver$findElement(using = "css", value = css$process_audio_btn)
process_audio_btn$clickElement()
download_btn <- driver$findElement(using = "css",
value = css$download_btn)
download_text <- download_btn$getElementText()[[1]]
print("Waiting for download button to appear")
}
# Sometimes the search returns an error after clicking the item
# In that case, break the while loop
if (error_text != ""){
break
}
# Once the audio has been processed, download it:
download_btn$clickElement()
# Close download
close_button <- driver$findElement(using = "css",
value = css$close_download_btn)
close_button$clickElement()
# Finally, get the name of the new file and rename it according to
# the status id of the tweet (introduce a while loop to wait for the download)
end_dir <- list.files(download_dir)
new_file <- setdiff(end_dir, beginning_dir)
while ((identical(new_file, character(0))) | (length(new_file) == 2)){
Sys.sleep(1)
end_dir <- list.files(download_dir)
new_file <- setdiff(end_dir, beginning_dir)
print("Waiting for file to be downloaded")
}
file.rename(from = paste0(download_dir, "/", new_file),
to = paste0(download_dir, "/", status_id, ".mp3"))
# Finally, change the error text to exit the loop
error_text <- "Finished"
}
# Clean search box for next step
search_box <- driver$findElement(using = "css", value = css$search_box)
search_box$clearElement()
# Wait a bit to avoid overload:
Sys.sleep(0.2)
}
}
tweets_df[tweets_df$status_id == 1192529772477341696, "status_url"]
tweets_df[tweets_df$status_id == 1192379250034302976, "status_url"]
tweets_df[tweets_df$status_id == 1192211079058857984, "status_url"]
driver$close()
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(RSelenium)
options(scipen = 9999)
# Read our tweets dataframe:
tweets_df <- read_csv("../data/tweets_df.csv")
# Get all tweets that might contain a video
# (Those for which media_type is "photo" are restrictive. Rather, we should
# get all videos that include a link in the tweet):
tweets_df$has_https <- grepl("https.*", tweets_df$text)
round(sum(tweets_df$has_https) / nrow(tweets_df) * 100, 2)
tweets_df
# Set up the download directory:
download_dir <- normalizePath("../data/raw/audio_files")
fprof <- makeFirefoxProfile(list(browser.download.manager.showWhenStarting = FALSE,
browser.download.alwaysOpenPanel = FALSE,
browser.download.dir = download_dir,
browser.helperApps.neverAsk.saveToDisk="text/csv",
browser.helperApps.neverAsk.saveToDisk = "text/csv",
browser.download.folderList = 2L))
# Initialize the browser
rD<- rsDriver(browser = c("firefox"), extraCapabilities = fprof)
driver <- rD$client
# Check that it is navigating properly
url <- "https://f2mp.com/twitter"
driver$navigate(url)
# Set up the selectors:
css <- list()
css$search_box <- '#txt-url'
css$search_btn <- '#btn-start'
css$audio_mode_btn <- '.active+ li a'
css$audio_mode_btn2 <- '.nav-tabs > li:nth-child(2) > a:nth-child(1)'
css$process_audio_btn <- '.btn-download-audio'
css$error_message <- '#result-errors > span:nth-child(3)'
css$download_btn <- 'button.btn-success:nth-child(2)'
css$close_download_btn <- '.btn-default'
# Search procedure per each tweet
# (New files)
final_tweets <- tweets_df %>% filter(status_id %in% c(1191695551827283968,
1190676224747720704,
1192804213287350272,
1192879345255223296,
1192424059038031872,
1192505165435297792,
1192762577857724416	))
View(final_tweets)
View(final_tweets)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(RSelenium)
options(scipen = 9999)
# Read our tweets dataframe:
tweets_df <- read_csv("../data/tweets_df.csv")
# Get all tweets that might contain a video
# (Those for which media_type is "photo" are restrictive. Rather, we should
# get all videos that include a link in the tweet):
tweets_df$has_https <- grepl("https.*", tweets_df$text)
round(sum(tweets_df$has_https) / nrow(tweets_df) * 100, 2)
tweets_df
# Set up the download directory:
download_dir <- normalizePath("../data/raw/audio_files")
fprof <- makeFirefoxProfile(list(browser.download.manager.showWhenStarting = FALSE,
browser.download.alwaysOpenPanel = FALSE,
browser.download.dir = download_dir,
browser.helperApps.neverAsk.saveToDisk="text/csv",
browser.helperApps.neverAsk.saveToDisk = "text/csv",
browser.download.folderList = 2L))
# Initialize the browser
rD<- rsDriver(browser = c("firefox"), extraCapabilities = fprof)
driver <- rD$client
# Check that it is navigating properly
url <- "https://f2mp.com/twitter"
driver$navigate(url)
# Search procedure per each tweet
# (New files)
final_tweets <- tweets_df %>% filter(status_id %in% c(1191695551827283968,
1190676224747720704))
# Search procedure per each tweet
# (New files)
final_tweets <- tweets_df %>% filter(status_id %in% c(1191695551827283968,
1190676224747720704))
for (row in 1:nrow(final_tweets)){
print(paste0("ROW: ", row))
print(final_tweets[[row, "text"]])
has_https <- final_tweets[[row, "has_https"]]
print(paste0("HAS HTTPS: ", has_https))
# If the tweet does not have a link, go to the next one
if (has_https){
status_id <- final_tweets[[row, "status_id"]]
tweet_link <- final_tweets[[row, "status_url"]]
print(paste0("STATUS ID: ", status_id))
print(paste0("LINK: ", tweet_link))
# Get the directory to compare at the end and get the name of the new files
beginning_dir <- list.files(download_dir)
# Items for the search
search_box <- driver$findElement(using = "css", value = css$search_box)
search_btn <- driver$findElement(using = "css", value = css$search_btn)
# Type the URL and find the item
search_box$sendKeysToElement(list(tweet_link))
search_btn$clickElement()
# Give enough time before checking whether there is an error
Sys.sleep(1.5)
# Click the audio mode for download
#       Only the first time, afterwards it remains fixed:
#       n_searches <- n_searches + 1
audio_mode_btn <- driver$findElement(using = "css", value = css$audio_mode_btn2)
audio_mode_btn$clickElement()
# Check that there have not been any errors:
error_message <- driver$findElement(using = "css", value = css$error_message)
error_text <- error_message$getElementText()[[1]]
# This error appears when the file is not a video. In that case, the code
# does not run and we jump to the following tweet
while (error_text == ""){
Sys.sleep(0.1)
# Start processing the mp3 file
process_audio_btn <- driver$findElement(using = "css", value = css$process_audio_btn)
process_audio_btn$clickElement()
Sys.sleep(0.5)
# Find the download button
download_btn <- driver$findElement(using = "css",
value = css$download_btn)
download_text <- download_btn$getElementText()[[1]]
# Wait until the audio has been processed
while ((download_text == "") & (error_text == "")){
Sys.sleep(2)
# Check again that there is not any error after applying the search:
error_message <- driver$findElement(using = "css", value = css$error_message)
error_text <- error_message$getElementText()[[1]]
# Sometimes you need to click again
audio_mode_btn <- driver$findElement(using = "css", value = css$audio_mode_btn2)
audio_mode_btn$clickElement()
process_audio_btn <- driver$findElement(using = "css", value = css$process_audio_btn)
process_audio_btn$clickElement()
download_btn <- driver$findElement(using = "css",
value = css$download_btn)
download_text <- download_btn$getElementText()[[1]]
print("Waiting for download button to appear")
}
# Sometimes the search returns an error after clicking the item
# In that case, break the while loop
if (error_text != ""){
break
}
# Once the audio has been processed, download it:
download_btn$clickElement()
# Close download
close_button <- driver$findElement(using = "css",
value = css$close_download_btn)
close_button$clickElement()
# Finally, get the name of the new file and rename it according to
# the status id of the tweet (introduce a while loop to wait for the download)
end_dir <- list.files(download_dir)
new_file <- setdiff(end_dir, beginning_dir)
while ((identical(new_file, character(0))) | (length(new_file) == 2)){
Sys.sleep(1)
end_dir <- list.files(download_dir)
new_file <- setdiff(end_dir, beginning_dir)
print("Waiting for file to be downloaded")
}
file.rename(from = paste0(download_dir, "/", new_file),
to = paste0(download_dir, "/", status_id, ".mp3"))
# Finally, change the error text to exit the loop
error_text <- "Finished"
}
# Clean search box for next step
search_box <- driver$findElement(using = "css", value = css$search_box)
search_box$clearElement()
# Wait a bit to avoid overload:
Sys.sleep(0.2)
}
}
# Set up the selectors:
css <- list()
css$search_box <- '#txt-url'
css$search_btn <- '#btn-start'
css$audio_mode_btn <- '.active+ li a'
css$audio_mode_btn2 <- '.nav-tabs > li:nth-child(2) > a:nth-child(1)'
css$process_audio_btn <- '.btn-download-audio'
css$error_message <- '#result-errors > span:nth-child(3)'
css$download_btn <- 'button.btn-success:nth-child(2)'
css$close_download_btn <- '.btn-default'
# Search procedure per each tweet
# (New files)
final_tweets <- tweets_df %>% filter(status_id %in% c(1191695551827283968,
1190676224747720704))
for (row in 1:nrow(final_tweets)){
print(paste0("ROW: ", row))
print(final_tweets[[row, "text"]])
has_https <- final_tweets[[row, "has_https"]]
print(paste0("HAS HTTPS: ", has_https))
# If the tweet does not have a link, go to the next one
if (has_https){
status_id <- final_tweets[[row, "status_id"]]
tweet_link <- final_tweets[[row, "status_url"]]
print(paste0("STATUS ID: ", status_id))
print(paste0("LINK: ", tweet_link))
# Get the directory to compare at the end and get the name of the new files
beginning_dir <- list.files(download_dir)
# Items for the search
search_box <- driver$findElement(using = "css", value = css$search_box)
search_btn <- driver$findElement(using = "css", value = css$search_btn)
# Type the URL and find the item
search_box$sendKeysToElement(list(tweet_link))
search_btn$clickElement()
# Give enough time before checking whether there is an error
Sys.sleep(1.5)
# Click the audio mode for download
#       Only the first time, afterwards it remains fixed:
#       n_searches <- n_searches + 1
audio_mode_btn <- driver$findElement(using = "css", value = css$audio_mode_btn2)
audio_mode_btn$clickElement()
# Check that there have not been any errors:
error_message <- driver$findElement(using = "css", value = css$error_message)
error_text <- error_message$getElementText()[[1]]
# This error appears when the file is not a video. In that case, the code
# does not run and we jump to the following tweet
while (error_text == ""){
Sys.sleep(0.1)
# Start processing the mp3 file
process_audio_btn <- driver$findElement(using = "css", value = css$process_audio_btn)
process_audio_btn$clickElement()
Sys.sleep(0.5)
# Find the download button
download_btn <- driver$findElement(using = "css",
value = css$download_btn)
download_text <- download_btn$getElementText()[[1]]
# Wait until the audio has been processed
while ((download_text == "") & (error_text == "")){
Sys.sleep(2)
# Check again that there is not any error after applying the search:
error_message <- driver$findElement(using = "css", value = css$error_message)
error_text <- error_message$getElementText()[[1]]
# Sometimes you need to click again
audio_mode_btn <- driver$findElement(using = "css", value = css$audio_mode_btn2)
audio_mode_btn$clickElement()
process_audio_btn <- driver$findElement(using = "css", value = css$process_audio_btn)
process_audio_btn$clickElement()
download_btn <- driver$findElement(using = "css",
value = css$download_btn)
download_text <- download_btn$getElementText()[[1]]
print("Waiting for download button to appear")
}
# Sometimes the search returns an error after clicking the item
# In that case, break the while loop
if (error_text != ""){
break
}
# Once the audio has been processed, download it:
download_btn$clickElement()
# Close download
close_button <- driver$findElement(using = "css",
value = css$close_download_btn)
close_button$clickElement()
# Finally, get the name of the new file and rename it according to
# the status id of the tweet (introduce a while loop to wait for the download)
end_dir <- list.files(download_dir)
new_file <- setdiff(end_dir, beginning_dir)
while ((identical(new_file, character(0))) | (length(new_file) == 2)){
Sys.sleep(1)
end_dir <- list.files(download_dir)
new_file <- setdiff(end_dir, beginning_dir)
print("Waiting for file to be downloaded")
}
file.rename(from = paste0(download_dir, "/", new_file),
to = paste0(download_dir, "/", status_id, ".mp3"))
# Finally, change the error text to exit the loop
error_text <- "Finished"
}
# Clean search box for next step
search_box <- driver$findElement(using = "css", value = css$search_box)
search_box$clearElement()
# Wait a bit to avoid overload:
Sys.sleep(0.2)
}
}
# First, let us see which of the tweets had a video:
final_mp3s <- list.files(download_dir)
clean_mp3s <- sapply(final_mp3s, FUN = function(x) substr(x, 1, nchar(x) - 4)) %>%
unname(.)
tweets_df$has_video <- tweets_df$status_id %in% clean_mp3s
driver$close()
rD$server$stop()
# Export also the tweets_df dataframe now that we know which tweets contained videos:
rio::export(tweets_df, "../data/tweets_df.csv")
a <- read_csv("../data/tweets_df.csv")
View(a)
knitr::opts_chunk$set(echo = TRUE)
# Get the MFD 2.0 (Frimer et al., 2017) and transform it into a list:
mfd_dict <- quanteda.dictionaries::data_dictionary_MFD
ls_MFD_dict <- as.list(mfd_dict)
ls_MFD_dict
